import{_ as c}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as l,c as r,a,b as n,e,f as t}from"./app-96bff47c.js";const p="/free/assets/缓冲消峰-a2cc60fc.jpg",d="/free/assets/解耦-2aa712a3.jpg",u="/free/assets/异步通信-20eb42a9.jpg",k="/free/assets/点对点模式-9ed46642.jpg",m="/free/assets/发布订阅模式-0629ce7a.jpg",v="/free/assets/Kafka基础架构-9c1ed16f.jpg",i="/free/assets/发送原理-35ba6e1f.jpg",h="/free/assets/提高并行度-d3dd37e7.png",b="/free/assets/消费者组-12fad549.jpg",g="/free/assets/生产者提高吞吐量-709a278d.jpg",x="/free/assets/幂等性-c398d395.jpg",f="/free/assets/事务-06c57009.jpg",_="/free/assets/数据有序-577e7d69.jpg",y="/free/assets/Mysql事务失效-376bd92a.jpg",w={},M=t(`<h1 id="kafka" tabindex="-1"><a class="header-anchor" href="#kafka" aria-hidden="true">#</a> Kafka</h1><h2 id="第一章-kafka概述" tabindex="-1"><a class="header-anchor" href="#第一章-kafka概述" aria-hidden="true">#</a> 第一章 Kafka概述</h2><h3 id="_1-1-定义" tabindex="-1"><a class="header-anchor" href="#_1-1-定义" aria-hidden="true">#</a> 1.1 定义</h3><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>Kafka传统定义：Kafka是一个分布式的基于发布/订阅模式的消息队列(MessageQueue），主要应用于大数据实时处理领域。
发布/订阅:消息的发布者不会将消息直接发送给特定的订阅者，而是将发布的消息分为不同的类别，订阅者只接收感兴趣的消息。
Kafka最新定义:Kafka是一个开源的分布式事件流平台（Event StreaminPlatform)，被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2-消息队列" tabindex="-1"><a class="header-anchor" href="#_1-2-消息队列" aria-hidden="true">#</a> 1.2 消息队列</h3><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>目前企业中比较常见的消息队列产品主要有Kafka、ActiveMQ、RabbitMQ、RocketMQ等。
在大数据场景主要采用Kafka作为消息队列。在JavaEE开发中主要采用ActiveMQ、RabbitMQ、RocketMQ。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-消息队列的应用场景" tabindex="-1"><a class="header-anchor" href="#_1-3-消息队列的应用场景" aria-hidden="true">#</a> 1.3 消息队列的应用场景</h3><h4 id="_1、缓存-消峰" tabindex="-1"><a class="header-anchor" href="#_1、缓存-消峰" aria-hidden="true">#</a> 1、缓存/消峰</h4><img src="`+p+'" style="zoom:67%;"><h4 id="_2、解耦" tabindex="-1"><a class="header-anchor" href="#_2、解耦" aria-hidden="true">#</a> 2、解耦</h4><img src="'+d+'" style="zoom:67%;"><h4 id="_3、异步通信" tabindex="-1"><a class="header-anchor" href="#_3、异步通信" aria-hidden="true">#</a> 3、异步通信</h4><img src="'+u+'" style="zoom:67%;"><h3 id="_1-4-消息队列的两种消费方式" tabindex="-1"><a class="header-anchor" href="#_1-4-消息队列的两种消费方式" aria-hidden="true">#</a> 1.4 消息队列的两种消费方式</h3><h4 id="_1、点对点模式" tabindex="-1"><a class="header-anchor" href="#_1、点对点模式" aria-hidden="true">#</a> 1、点对点模式</h4><img src="'+k+'" style="zoom:67%;"><h4 id="_2、发布订阅模式" tabindex="-1"><a class="header-anchor" href="#_2、发布订阅模式" aria-hidden="true">#</a> 2、发布订阅模式</h4><img src="'+m+'" style="zoom:67%;"><h3 id="_1-5-kafka基础架构" tabindex="-1"><a class="header-anchor" href="#_1-5-kafka基础架构" aria-hidden="true">#</a> 1.5 Kafka基础架构</h3><img src="'+v+`" style="zoom:67%;"><h4 id="_1、producer" tabindex="-1"><a class="header-anchor" href="#_1、producer" aria-hidden="true">#</a> 1、Producer</h4><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>消息生产者，就是向Kafka broker发消息的客户端。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2、consumer" tabindex="-1"><a class="header-anchor" href="#_2、consumer" aria-hidden="true">#</a> 2、Consumer</h4><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>消息消费者，向Kafka broker 取消息的客户端。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3、consumer-group" tabindex="-1"><a class="header-anchor" href="#_3、consumer-group" aria-hidden="true">#</a> 3、Consumer Group</h4><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>Consumer Group (CG):消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费;消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_4、broker" tabindex="-1"><a class="header-anchor" href="#_4、broker" aria-hidden="true">#</a> 4、Broker</h4><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>一台Kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_5、topic" tabindex="-1"><a class="header-anchor" href="#_5、topic" aria-hidden="true">#</a> 5、Topic</h4><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>可以理解为一个队列，生产者和消费者面向的都是一个 topic。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_6、partition" tabindex="-1"><a class="header-anchor" href="#_6、partition" aria-hidden="true">#</a> 6、Partition</h4><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>为了实现扩展性，一个非常大的 topic 可以分布到多个 broker（即服务器）上，一个 topic 可以分为多个 partition，每个 partition 是一个有序的队列。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_7、replica" tabindex="-1"><a class="header-anchor" href="#_7、replica" aria-hidden="true">#</a> 7、Replica</h4><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>副本。一个 topic 的每个分区都有若干个副本，一个 Leader 和若干个Follower。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_8、leader" tabindex="-1"><a class="header-anchor" href="#_8、leader" aria-hidden="true">#</a> 8、Leader</h4><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是 Leader。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_9、follower" tabindex="-1"><a class="header-anchor" href="#_9、follower" aria-hidden="true">#</a> 9、Follower</h4><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>每个分区多个副本中的“从”，实时从 Leader 中同步数据，保持和Leader 数据的同步。Leader 发生故障时，某个 Follower 会成为新的 Leader。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="第二章-kafka生产者" tabindex="-1"><a class="header-anchor" href="#第二章-kafka生产者" aria-hidden="true">#</a> 第二章 Kafka生产者</h2><h4 id="_2-1、发送原理" tabindex="-1"><a class="header-anchor" href="#_2-1、发送原理" aria-hidden="true">#</a> 2.1、发送原理</h4><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>在消息发送的过程中，涉及到了两个线程——main 线程和 Sender 线程。在 main 线程中创建了一个双端队列 RecordAccumulator。main 线程将消息发送给 RecordAccumulator，Sender线程不断从RecordAccumulator中拉取消息发送到 Kafka Broker。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+i+`" style="zoom:67%;"><h4 id="_2-2、生产者重要参数" tabindex="-1"><a class="header-anchor" href="#_2-2、生产者重要参数" aria-hidden="true">#</a> 2.2、生产者重要参数</h4><h5 id="_1、bootstrap-servers" tabindex="-1"><a class="header-anchor" href="#_1、bootstrap-servers" aria-hidden="true">#</a> 1、bootstrap.servers</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>Kafka集群地址，可以设置一个或多个，中间用逗号分隔。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、key-serializer、value-serializer" tabindex="-1"><a class="header-anchor" href="#_2、key-serializer、value-serializer" aria-hidden="true">#</a> 2、key.serializer、value.serializer</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>指定发送消息的 key 和 value 的序列化类型。一般写org.apache.kafka.common.serialization.StringSerializer。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_3、buffer-memory" tabindex="-1"><a class="header-anchor" href="#_3、buffer-memory" aria-hidden="true">#</a> 3、buffer.memory</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>缓冲区总大小，默认 32m。
生产者可以用来缓冲等待发送到服务器的记录的总内存字节数。如果记录的发送速度超过了它们可以发送到服务器的速度，则生产者将阻塞\`max.block.ms\`之后将抛出异常。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、compression-type" tabindex="-1"><a class="header-anchor" href="#_4、compression-type" aria-hidden="true">#</a> 4、compression.type</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>消息发送压缩类型。默认不压缩。有效值为 none、gzip、snappy、lz4和zstd。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_5、batch-size" tabindex="-1"><a class="header-anchor" href="#_5、batch-size" aria-hidden="true">#</a> 5、batch.size</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>缓冲区一批数据最大值，默认 16384(16k)。适当增加该值，可以提高吞吐量，但是如果该值设置太大，会导致数据传输延迟增加。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,53),q={id:"_6、linger-ms",tabindex:"-1"},S=a("a",{class:"header-anchor",href:"#_6、linger-ms","aria-hidden":"true"},"#",-1),j={href:"http://linger.ms",target:"_blank",rel:"noopener noreferrer"},z=t(`<div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>如果数据迟迟未达到 batch.size，sender 等待 linger.time之后就会发送数据。单位 ms，默认值是 0ms，表示没有延迟。生产环境建议该值大小为 5-100ms 之间。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_7、acks" tabindex="-1"><a class="header-anchor" href="#_7、acks" aria-hidden="true">#</a> 7、acks</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>0：生产者发送过来的数据，不需要等数据落盘应答。
1：生产者发送过来的数据，Leader 收到数据后应答。
-1（all）：生产者发送过来的数据，Leader和 isr 队列里面的所有节点收齐数据后应答。默认值是-1，-1 和all 是等价的。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_8、max-in-flight-requests-per-connection" tabindex="-1"><a class="header-anchor" href="#_8、max-in-flight-requests-per-connection" aria-hidden="true">#</a> 8、max.in.flight.requests.per.connection</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>允许最多没有返回 ack 的次数，默认为 5，开启幂等性要保证该值是 1-5 的数字。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_9、retries" tabindex="-1"><a class="header-anchor" href="#_9、retries" aria-hidden="true">#</a> 9、retries</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>当消息发送出现错误的时候，系统会重发消息。retries表示重试次数。默认是 int 最大值，2147483647。如果设置了重试，还想保证消息的有序性，需要设置MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION=1否则在重试此失败消息的时候，其他的消息可能发送成功了。用户通常应该更喜欢不设置此配置，而是使用它delivery.timeout.ms来控制重试行为。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,7),T={id:"_10、retry-backoff-ms",tabindex:"-1"},C=a("a",{class:"header-anchor",href:"#_10、retry-backoff-ms","aria-hidden":"true"},"#",-1),K={href:"http://retry.backoff.ms",target:"_blank",rel:"noopener noreferrer"},L=t(`<div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>两次重试之间的时间间隔，默认是 100ms。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_11、enable-idempotence" tabindex="-1"><a class="header-anchor" href="#_11、enable-idempotence" aria-hidden="true">#</a> 11、enable.idempotence</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>是否开启幂等性，默认 true，开启幂等性。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),I={id:"_12、delivery-timeout-ms",tabindex:"-1"},P=a("a",{class:"header-anchor",href:"#_12、delivery-timeout-ms","aria-hidden":"true"},"#",-1),A={href:"http://delivery.timeout.ms",target:"_blank",rel:"noopener noreferrer"},D=t(`<div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>发送信息成功或失败的时间上限。这限制了记录在发送之前将被延迟的总时间、等待代理确认的时间（如果需要）以及可重试发送失败所允许的时间。此配置的值应大于或等于request.timeout.ms(默认30s)和linger.ms之和。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_13、enable-idempotence" tabindex="-1"><a class="header-anchor" href="#_13、enable-idempotence" aria-hidden="true">#</a> 13、enable.idempotence</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>启用幂等性要求max.in.flight.requests.per.connection小于或等于 5（保留任何允许值的消息顺序），retries大于 0，并且acks必须为-1。如果没有设置冲突配置，则默认启用幂等性。如果设置了冲突配置并且没有显式启用幂等性，则禁用幂等性。如果显式启用了幂等性并且设置了冲突的配置，ConfigException抛出异常。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_2-3、分区" tabindex="-1"><a class="header-anchor" href="#_2-3、分区" aria-hidden="true">#</a> 2.3、分区</h4><h5 id="_1、分区的好处" tabindex="-1"><a class="header-anchor" href="#_1、分区的好处" aria-hidden="true">#</a> 1、分区的好处</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>1、便于合理使用存储资源，每个Partition在一个Broker上存储，可以把海量的数据按照分区切割成一块一块数据存储在多台Broker上。合理控制分区的任务，可以实现负载均衡的效果。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>2、提高并行度，生产者可以以分区为单位发送数据；消费者可以以分区为单位进行消费数据。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><img src="`+h+`" style="zoom:67%;"><h5 id="_2、默认的分区器" tabindex="-1"><a class="header-anchor" href="#_2、默认的分区器" aria-hidden="true">#</a> 2、默认的分区器</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>DefaultPartitioner：
1、指明partition的情况下，直接将指明的值作为partition值；例如partition=0，所有数据写入分区0。
2、没有指明partition值但有key的情况下，将key的hash值与topic的partition数进行取余得到partition值。
3、既没有partition值又没有key值的情况下，Kafka采用Sticky Partition（黏性分区器），会随机选择一个分区，并尽可能一直使用该分区，待该分区的batch已满或者已完成，Kafka再随机一个分区进行使用（和上一次的分区不同）。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、自定义分区器" tabindex="-1"><a class="header-anchor" href="#_3、自定义分区器" aria-hidden="true">#</a> 3、自定义分区器</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Partitioner</span> <span class="token keyword">extends</span> <span class="token class-name">Configurable</span><span class="token punctuation">,</span> <span class="token class-name">Closeable</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * Compute the partition for the given record.
     *
     * <span class="token keyword">@param</span> <span class="token parameter">topic</span> The topic name
     * <span class="token keyword">@param</span> <span class="token parameter">key</span> The key to partition on (or null if no key)
     * <span class="token keyword">@param</span> <span class="token parameter">keyBytes</span> The serialized key to partition on( or null if no key)
     * <span class="token keyword">@param</span> <span class="token parameter">value</span> The value to partition on or null
     * <span class="token keyword">@param</span> <span class="token parameter">valueBytes</span> The serialized value to partition on or null
     * <span class="token keyword">@param</span> <span class="token parameter">cluster</span> The current cluster metadata
     */</span>
    <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * This is called when partitioner is closed.
     */</span>
    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * Notifies the partitioner a new batch is about to be created. When using the sticky partitioner,
     * this method can change the chosen sticky partition for the new batch. 
     * <span class="token keyword">@param</span> <span class="token parameter">topic</span> The topic name
     * <span class="token keyword">@param</span> <span class="token parameter">cluster</span> The current cluster metadata
     * <span class="token keyword">@param</span> <span class="token parameter">prevPartition</span> The partition previously selected for the record that triggered a new batch
     */</span>
    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">onNewBatch</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">,</span> <span class="token keyword">int</span> prevPartition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>实现<code>Partitioner</code>接口，重写<code>partition</code>方法返回分区号。</p><h3 id="第三章-kafka消费者" tabindex="-1"><a class="header-anchor" href="#第三章-kafka消费者" aria-hidden="true">#</a> 第三章 Kafka消费者</h3><h4 id="_3-1、消费方式" tabindex="-1"><a class="header-anchor" href="#_3-1、消费方式" aria-hidden="true">#</a> 3.1、消费方式</h4><blockquote><p>pull（拉）模 式</p></blockquote><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>consumer采用从broker中主动拉取数据。Kafka采用这种方式。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>push（推）模式</p></blockquote><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>Kafka没有采用这种方式，因为由broker决定消息发送速率，很难适应所有消费者的消费速率。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="_3-2、消费者组" tabindex="-1"><a class="header-anchor" href="#_3-2、消费者组" aria-hidden="true">#</a> 3.2、消费者组</h4><blockquote><p>Consumer Group（CG）：消费者组，由多个consumer组成。形成一个消费者组的条件，是所有消费者的groupid相同。</p></blockquote><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>• 消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费。 
• 消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+b+`" style="zoom:67%;"><blockquote><p>注意点：</p></blockquote><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>• 如果向消费组中添加更多的消费者，超过主题分区数量，则有一部分消费者就会闲置，不会接收任何消息。
• 消费者组之间互不影响。所有的消费者都属于某个消费者组，即消费者组是逻辑上的一个订阅者。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-3、消费者重要参数" tabindex="-1"><a class="header-anchor" href="#_3-3、消费者重要参数" aria-hidden="true">#</a> 3.3、消费者重要参数</h4><h5 id="_1、bootstrap-servers-1" tabindex="-1"><a class="header-anchor" href="#_1、bootstrap-servers-1" aria-hidden="true">#</a> 1、bootstrap.servers</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>向 Kafka 集群建立初始连接用到的 host/port 列表。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_2、key-deserializer-、value-deserializer" tabindex="-1"><a class="header-anchor" href="#_2、key-deserializer-、value-deserializer" aria-hidden="true">#</a> 2、key.deserializer 、value.deserializer</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>指定接收消息的 key 和 value 的反序列化类型。一定要写全类名。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,30),O={id:"_3、group-id",tabindex:"-1"},B=a("a",{class:"header-anchor",href:"#_3、group-id","aria-hidden":"true"},"#",-1),R={href:"http://group.id",target:"_blank",rel:"noopener noreferrer"},E=t(`<div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>消费者组id。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_4、enable-auto-commit" tabindex="-1"><a class="header-anchor" href="#_4、enable-auto-commit" aria-hidden="true">#</a> 4、enable.auto.commit</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>默认值为 true，消费者会自动周期性地向服务器提交偏移量。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,3),F={id:"_5、auto-commit-interval-ms",tabindex:"-1"},N=a("a",{class:"header-anchor",href:"#_5、auto-commit-interval-ms","aria-hidden":"true"},"#",-1),Q={href:"http://auto.commit.interval.ms",target:"_blank",rel:"noopener noreferrer"},G=t(`<div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>如果设置了 enable.auto.commit 的值为 true， 则该值定义了消费者偏移量向 Kafka 提交的频率，默认 5s。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_6、auto-offset-reset" tabindex="-1"><a class="header-anchor" href="#_6、auto-offset-reset" aria-hidden="true">#</a> 6、auto.offset.reset</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>当 Kafka 中没有初始偏移量或当前偏移量在服务器中不存在（如，数据被删除了），该如何处理？
earliest：自动重置偏移量到最早的偏移量。 
latest：默认，自动重置偏移量为最新的偏移量。 
none：如果消费组原来的（previous）偏移量不存在，则向消费者抛异常。
anything：向消费者抛异常。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_7、offsets-topic-num-partitions" tabindex="-1"><a class="header-anchor" href="#_7、offsets-topic-num-partitions" aria-hidden="true">#</a> 7、offsets.topic.num.partitions</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>__consumer_offsets 的分区数，默认是 50 个分区。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,5),V={id:"_8、heartbeat-interval-ms",tabindex:"-1"},J=a("a",{class:"header-anchor",href:"#_8、heartbeat-interval-ms","aria-hidden":"true"},"#",-1),U={href:"http://heartbeat.interval.ms",target:"_blank",rel:"noopener noreferrer"},W=a("div",{class:"language-tex line-numbers-mode","data-ext":"tex"},[a("pre",{class:"language-tex"},[a("code",null,`Kafka 消费者和 coordinator 之间的心跳时间，默认 3s。该条目的值必须小于 session.timeout.ms ，也不应该session.timeout.ms 的 1/3。
`)]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),H={id:"_9、session-timeout-ms",tabindex:"-1"},X=a("a",{class:"header-anchor",href:"#_9、session-timeout-ms","aria-hidden":"true"},"#",-1),Y={href:"http://session.timeout.ms",target:"_blank",rel:"noopener noreferrer"},Z=a("div",{class:"language-tex line-numbers-mode","data-ext":"tex"},[a("pre",{class:"language-tex"},[a("code",null,`Kafka 消费者和 coordinator 之间连接超时时间，默认 45s。超过该值，该消费者被移除，消费者组执行再平衡。
`)]),a("div",{class:"line-numbers","aria-hidden":"true"},[a("div",{class:"line-number"})])],-1),$={id:"_10、max-poll-interval-ms",tabindex:"-1"},aa=a("a",{class:"header-anchor",href:"#_10、max-poll-interval-ms","aria-hidden":"true"},"#",-1),na={href:"http://max.poll.interval.ms",target:"_blank",rel:"noopener noreferrer"},sa=t(`<div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>消费者处理消息的最大时长，默认是 5 分钟。超过该值，该消费者被移除，消费者组执行再平衡。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_11、fetch-min-bytes" tabindex="-1"><a class="header-anchor" href="#_11、fetch-min-bytes" aria-hidden="true">#</a> 11、fetch.min.bytes</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>默认 1 个字节。消费者获取服务器端一批消息最小的字节
数。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,3),ea={id:"_12、fetch-max-wait-ms",tabindex:"-1"},ta=a("a",{class:"header-anchor",href:"#_12、fetch-max-wait-ms","aria-hidden":"true"},"#",-1),ia={href:"http://fetch.max.wait.ms",target:"_blank",rel:"noopener noreferrer"},ca=t(`<div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>默认 500ms。如果没有从服务器端获取到一批数据的最小字节数。该时间到，仍然会返回数据。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_13、fetch-max-bytes" tabindex="-1"><a class="header-anchor" href="#_13、fetch-max-bytes" aria-hidden="true">#</a> 13、fetch.max.bytes</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>默认 Default: 52428800（50 m）。消费者获取服务器端一批消息最大的字节数。如果服务器端一批次的数据大于该值（50m）仍然可以拉取回来这批数据，因此，这不是一个绝对最大值。一批次的大小受 message.max.bytes （broker config）or max.message.bytes （topic config）影响。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h5 id="_14、max-poll-records" tabindex="-1"><a class="header-anchor" href="#_14、max-poll-records" aria-hidden="true">#</a> 14、max.poll.records</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>一次 poll 拉取数据返回消息的最大条数，默认是 500 条。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="第四章-生产经验" tabindex="-1"><a class="header-anchor" href="#第四章-生产经验" aria-hidden="true">#</a> 第四章 生产经验</h3><h4 id="_4-1、生产者提高吞吐量" tabindex="-1"><a class="header-anchor" href="#_4-1、生产者提高吞吐量" aria-hidden="true">#</a> 4.1、生产者提高吞吐量</h4><img src="`+g+`" style="zoom:67%;"><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>batch.size：默认16384(16k)，提高批次大小。
linger.ms：等待时间，默认不等待，修改为5-100ms。
compression.type：默认不压缩，设置信息压缩格式为 snappy。
buffer.memory：缓冲区大小，默认为33554432(32m)，修改为64m
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-2、数据可靠性" tabindex="-1"><a class="header-anchor" href="#_4-2、数据可靠性" aria-hidden="true">#</a> 4.2、数据可靠性</h4><img src="`+i+`" style="zoom:67%;"><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>acks=0，生产者发送过来数据就不管了，可靠性差，效率高；
acks=1，生产者发送过来数据Leader应答，可靠性中等，效率中等；
acks=-1，生产者发送过来数据Leader和ISR队列里面所有Follwer应答，可靠性高，效率低；
在生产环境中，acks=0很少使用；acks=1，一般用于传输普通日志，允许丢个别数据；acks=-1，一般用于传输和钱相关的数据，对可靠性要求比较高的场景。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>**总结：**数据完全可靠条件 = ACK级别设置为-1 + 分区副本大于等于2 + ISR里应答的最小副本数量大于等于2。<br> **数据可靠性分析：**如果分区副本设置为1个，或者ISR里应答的最小副本数量（ min.insync.replicas 默认为1）设置为1，和ack=1的效果是一样的，仍然有丢数的风险（leader：0，isr:0）。</p><p><strong>思考</strong>：Leader收到数据，所有Follower都开始同步数据，但有一个Follower，因为某种故障，迟迟不能与Leader进行同步，那这个问题怎么解决呢？</p><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>Leader维护了一个动态的in-sync replica set（ISR），意为和Leader保持同步的Follower+Leader集合(leader：0，isr:0,1,2)。
如果Follower长时间未向Leader发送通信请求或同步数据，则该Follower将被踢出ISR。该时间阈值由replica.lag.time.max.ms参数设定，默认30s。这样就不用等长期联系不上或者已经故障的节点。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-3、数据去重" tabindex="-1"><a class="header-anchor" href="#_4-3、数据去重" aria-hidden="true">#</a> 4.3、数据去重</h4><h5 id="_1、数据传递语义" tabindex="-1"><a class="header-anchor" href="#_1、数据传递语义" aria-hidden="true">#</a> 1、数据传递语义</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>至少一次（At Least Once）= ACK级别设置为-1 + 分区副本大于等于2 + ISR里应答的最小副本数量大于等于2 
最多一次（At Most Once）= ACK级别设置为0 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_2、生产者数据重复" tabindex="-1"><a class="header-anchor" href="#_2、生产者数据重复" aria-hidden="true">#</a> 2、生产者数据重复</h5><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>At Least Once可以保证数据不丢失，但是不能保证数据不重复；
At Most Once可以保证数据不重复，但是不能保证数据不丢失。
精确一次（Exactly Once）：对于一些非常重要的信息，比如和钱相关的数据，要求数据既不能重复也不丢失。
Kafka 0.11版本以后，引入了一项重大特性：幂等性和事务。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_3、幂等性" tabindex="-1"><a class="header-anchor" href="#_3、幂等性" aria-hidden="true">#</a> 3、幂等性</h5><img src="`+x+`" style="zoom:67%;"><blockquote><p>幂等性原理</p></blockquote><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>幂等性就是指Producer不论向Broker发送多少次重复数据，Broker端都只会持久化一条，保证了不重复。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>重复数据的判断标准</p></blockquote><div class="language-tex line-numbers-mode" data-ext="tex"><pre class="language-tex"><code>具有&lt;PID, Partition, SeqNumber&gt;相同主键的消息提交时，Broker只会持久化一条。其中PID是生产者每次重启都会分配一个新的；Partition 表示分区号；Sequence Number是单调自增的。
总结：开启参数 enable.idempotence 默认为 true。幂等性只能保证的是在单分区单会话内不重复。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_4、生产者事务" tabindex="-1"><a class="header-anchor" href="#_4、生产者事务" aria-hidden="true">#</a> 4、生产者事务</h5><img src="`+f+'" style="zoom:67%;">',28),oa={href:"http://xn--transacation-ft4smsj63e800bjza54e6vfd9bu10z8btakx8d647c.id",target:"_blank",rel:"noopener noreferrer"},la=t('<h4 id="_4-4、数据乱序" tabindex="-1"><a class="header-anchor" href="#_4-4、数据乱序" aria-hidden="true">#</a> 4.4、数据乱序</h4><blockquote><p>解决方案：</p></blockquote><h5 id="_1、kafka在1-x版本之前" tabindex="-1"><a class="header-anchor" href="#_1、kafka在1-x版本之前" aria-hidden="true">#</a> 1、kafka在1.x版本之前</h5><blockquote><p><strong>max.in.flight.requests.per.connection</strong> = 1（不需要考虑是否开启幂等性）。</p></blockquote><h5 id="_2-、kafka在1-x及以后" tabindex="-1"><a class="header-anchor" href="#_2-、kafka在1-x及以后" aria-hidden="true">#</a> 2*、kafka在1.x及以后</h5><blockquote><p>（1）未开启幂等性</p><p><code>max.in.flight.requests.per.connection</code> = 1</p><p>（2）开启幂等性</p><p><code>max.in.flight.requests.per.connection</code> &lt;= 5</p><p>原因说明：因为在kafka1.x以后，启用幂等后，kafka服务端会缓存producer发来的最近5个request的元数据，故无论如何，都可以保证最近5个request的数据都是有序的。</p></blockquote><img src="'+_+`" style="zoom:67%;"><p><mark>个人发现一个现象，开启<code>Kafka</code>事务后，数据库<code>Mysql</code>事务失效了。</mark></p><h4 id="_4-5、消息如何生成唯一traceid" tabindex="-1"><a class="header-anchor" href="#_4-5、消息如何生成唯一traceid" aria-hidden="true">#</a> 4.5、消息如何生成唯一TraceId</h4><p>可以使用MD5对消息进行加密，这样同一个消息下发TraceId一定是相同的。</p><h3 id="第五章-kafka集成" tabindex="-1"><a class="header-anchor" href="#第五章-kafka集成" aria-hidden="true">#</a> 第五章 Kafka集成</h3><h5 id="_5-1、集成springboot" tabindex="-1"><a class="header-anchor" href="#_5-1、集成springboot" aria-hidden="true">#</a> 5.1、集成SpringBoot</h5><h6 id="_1、添加依赖" tabindex="-1"><a class="header-anchor" href="#_1、添加依赖" aria-hidden="true">#</a> 1、添加依赖</h6><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、yml配置" tabindex="-1"><a class="header-anchor" href="#_2、yml配置" aria-hidden="true">#</a> 2、yml配置</h6><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
    <span class="token comment"># kafka集群地址</span>
    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 192.168.39.100<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>192.168.39.101<span class="token punctuation">:</span><span class="token number">9092</span><span class="token punctuation">,</span>192.168.39.102<span class="token punctuation">:</span><span class="token number">9092</span>
    <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
      <span class="token comment"># 消费者组id</span>
      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> consumer<span class="token punctuation">-</span>group
      <span class="token comment"># 关闭自动提交偏移量</span>
      <span class="token key atrule">enable-auto-commit</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>
    <span class="token comment"># 生产者配置</span>
    <span class="token key atrule">producer</span><span class="token punctuation">:</span>
      <span class="token comment"># 引发</span>
      <span class="token key atrule">acks</span><span class="token punctuation">:</span> all
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token comment"># 手动立即提交偏移量，与\`enable-auto-commit=false\`配合</span>
      <span class="token key atrule">ack-mode</span><span class="token punctuation">:</span> MANUAL_IMMEDIATE
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-2、生产者" tabindex="-1"><a class="header-anchor" href="#_5-2、生产者" aria-hidden="true">#</a> 5.2、生产者</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Autowired</span>
<span class="token keyword">private</span> <span class="token class-name">IAccountService</span> accountService<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_1、异步发送" tabindex="-1"><a class="header-anchor" href="#_1、异步发送" aria-hidden="true">#</a> 1、异步发送</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 默认是异步发送</span>
kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;flink-input&quot;</span><span class="token punctuation">,</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>sourceDataEvent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、同步发送" tabindex="-1"><a class="header-anchor" href="#_2、同步发送" aria-hidden="true">#</a> 2、同步发送</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// get方法会阻塞，一直到返回结果</span>
kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;flink-input&quot;</span><span class="token punctuation">,</span> objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>sourceDataEvent<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_3、异步回调" tabindex="-1"><a class="header-anchor" href="#_3、异步回调" aria-hidden="true">#</a> 3、异步回调</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> listenableFuture <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;learn-topic&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
listenableFuture<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListenableFutureCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">//失败回调</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> stringObjectSendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 成功回调</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-3-消费者" tabindex="-1"><a class="header-anchor" href="#_5-3-消费者" aria-hidden="true">#</a> 5.3 消费者</h5><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;learn-topic&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finkToKafka</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">,</span> <span class="token class-name">Acknowledgment</span> ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;数据消费：&quot;</span> <span class="token operator">+</span> records<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 手动提交偏移量</span>
    ack<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-4、批量消费" tabindex="-1"><a class="header-anchor" href="#_5-4、批量消费" aria-hidden="true">#</a> 5.4、批量消费</h5><h6 id="_1、yml配置" tabindex="-1"><a class="header-anchor" href="#_1、yml配置" aria-hidden="true">#</a> 1、yml配置</h6><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
    <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
      <span class="token comment"># 一次消费的数据</span>
	  <span class="token key atrule">max-poll-records</span><span class="token punctuation">:</span> <span class="token number">5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、消费者" tabindex="-1"><a class="header-anchor" href="#_2、消费者" aria-hidden="true">#</a> 2、消费者</h6><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;learn-topic&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finkToKafka</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConsumerRecord</span><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">,</span> <span class="token class-name">Acknowledgment</span> ack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// records.size() &lt;= 5</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;数据消费&quot;</span> <span class="token operator">+</span> records<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ack<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="_5-5、kafka事务" tabindex="-1"><a class="header-anchor" href="#_5-5、kafka事务" aria-hidden="true">#</a> 5.5、Kafka事务</h5><blockquote><p>业务场景，可以让mysql事务和Kafka事务绑定在一起，要么mysql事务和Kafka发送消息一起成功，要么一起失败。</p><p>Kafka事务发送消息都是未提交的消息，只有提交事务后，消息才会变成已提交，需要设置<code>isolation-level=read_committed</code>，否则消费者会消费到未提交的事务信息。</p></blockquote><h6 id="_1、yml配置-1" tabindex="-1"><a class="header-anchor" href="#_1、yml配置-1" aria-hidden="true">#</a> 1、yml配置</h6><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">kafka</span><span class="token punctuation">:</span>
    <span class="token key atrule">producer</span><span class="token punctuation">:</span>
	  <span class="token comment"># 事务前缀，开启事务</span>
      <span class="token key atrule">transaction-id-prefix</span><span class="token punctuation">:</span> kafka<span class="token punctuation">-</span>transaction
      <span class="token comment"># 设置事务隔离级别为读已提交：默认是读未提交</span>
      <span class="token key atrule">isolation-level</span><span class="token punctuation">:</span> read_committed
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2、消费者-1" tabindex="-1"><a class="header-anchor" href="#_2、消费者-1" aria-hidden="true">#</a> 2、消费者</h6><blockquote><p>开启事务后，只能发送事务消息，否则会报错。同时有两种发送事务消息的方式。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    kafkaTemplate<span class="token punctuation">.</span><span class="token function">executeInTransaction</span><span class="token punctuation">(</span>template <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        template<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;learn-topic&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">// 或</span>
<span class="token annotation punctuation">@Transactional</span>  <span class="token comment">// 可以结合mysql保持事务统一</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    template<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;learn-topic&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>开启Kafka事务后会造成Mysql事务失效</mark></p><h6 id="_3、解决kafka事务后造成的mysql事务失效" tabindex="-1"><a class="header-anchor" href="#_3、解决kafka事务后造成的mysql事务失效" aria-hidden="true">#</a> 3、解决Kafka事务后造成的Mysql事务失效</h6><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-0" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-0"> 添加依赖，如果没有的话</label></li></ul><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-data-commons<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-1" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-1"> 事务配置类</label></li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionConfig</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">DataSource</span> dataSource<span class="token punctuation">;</span>

    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionManagerCustomizers</span><span class="token punctuation">&gt;</span></span> transactionManagerCustomizers<span class="token punctuation">;</span>

    <span class="token class-name">TransactionConfig</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span>
                      <span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionManagerCustomizers</span><span class="token punctuation">&gt;</span></span> transactionManagerCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>dataSource <span class="token operator">=</span> dataSource<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>transactionManagerCustomizers <span class="token operator">=</span> transactionManagerCustomizers<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> <span class="token class-name">DataSourceTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">DataSourceTransactionManager</span> transactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        transactionManagerCustomizers<span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>customizers<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> customizers<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>transactionManager<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> transactionManager<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ChainedKafkaTransactionManager</span> <span class="token function">chainedKafkaTransactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSourceTransactionManager</span> transactionManager<span class="token punctuation">,</span>
                                                                         <span class="token class-name">KafkaTransactionManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> kafkaTransactionManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ChainedKafkaTransactionManager</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>transactionManager<span class="token punctuation">,</span> kafkaTransactionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul class="task-list-container"><li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" id="task-item-2" checked="checked" disabled="disabled"><label class="task-list-item-label" for="task-item-2"> 原因分析</label></li></ul><p><strong>Mysql事务管理器自动装配源码</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ConditionalOnClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token class-name">JdbcTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@AutoConfigureOrder</span><span class="token punctuation">(</span><span class="token class-name">Ordered</span><span class="token punctuation">.</span><span class="token constant">LOWEST_PRECEDENCE</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManagerAutoConfiguration</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Configuration</span><span class="token punctuation">(</span>proxyBeanMethods <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>
	<span class="token annotation punctuation">@ConditionalOnSingleCandidate</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
	<span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceTransactionManagerConfiguration</span> <span class="token punctuation">{</span>

		<span class="token annotation punctuation">@Bean</span>
		<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">PlatformTransactionManager</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
		<span class="token class-name">DataSourceTransactionManager</span> <span class="token function">transactionManager</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span>
				<span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TransactionManagerCustomizers</span><span class="token punctuation">&gt;</span></span> transactionManagerCustomizers<span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">DataSourceTransactionManager</span> transactionManager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceTransactionManager</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
			transactionManagerCustomizers<span class="token punctuation">.</span><span class="token function">ifAvailable</span><span class="token punctuation">(</span><span class="token punctuation">(</span>customizers<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> customizers<span class="token punctuation">.</span><span class="token function">customize</span><span class="token punctuation">(</span>transactionManager<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">return</span> transactionManager<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>

	<span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+y+'" style="zoom:100%;"><p>因为@ConditionalOnMissingBean(PlatformTransactionManager.class)的作用是如果容器中已经有TransactionManager类型的bean的话则不创建DataSourceTransactionManager，所以kafka开启事务后创建了kafkaTransactionManager故不再创建DataSourceTransactionManager，所以数据库事务失效了。</p>',49);function ra(pa,da){const s=o("ExternalLinkIcon");return l(),r("div",null,[M,a("h5",q,[S,n(" 6、"),a("a",j,[n("linger.ms"),e(s)])]),z,a("h5",T,[C,n(" 10、"),a("a",K,[n("retry.backoff.ms"),e(s)])]),L,a("h5",I,[P,n(" 12、"),a("a",A,[n("delivery.timeout.ms"),e(s)])]),D,a("h5",O,[B,n(" 3、"),a("a",R,[n("group.id"),e(s)])]),E,a("h5",F,[N,n(" 5、"),a("a",Q,[n("auto.commit.interval.ms"),e(s)])]),G,a("h5",V,[J,n(" 8、"),a("a",U,[n("heartbeat.interval.ms"),e(s)])]),W,a("h5",H,[X,n(" 9、"),a("a",Y,[n("session.timeout.ms"),e(s)])]),Z,a("h5",$,[aa,n(" 10、"),a("a",na,[n("max.poll.interval.ms"),e(s)])]),sa,a("h5",ea,[ta,n(" 12、"),a("a",ia,[n("fetch.max.wait.ms"),e(s)])]),ca,a("blockquote",null,[a("p",null,[n("注意：开启事务，"),a("a",oa,[n("必须开启幂等性并设置一个transacation.id"),e(s)]),n("。")])]),la])}const ma=c(w,[["render",ra],["__file","Kafka.html.vue"]]);export{ma as default};
